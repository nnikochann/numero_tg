# bot.py - –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
import logging
import os
import json
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –≤–º–µ—Å—Ç–æ Redis
from aiogram.types import (
    Message, InlineKeyboardButton, InlineKeyboardMarkup, PreCheckoutQuery,
    LabeledPrice, FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
try:
    from database_sqlite import Database  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SQLite –≤–µ—Ä—Å–∏—é
except ImportError:
    from database import Database  # –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é

from numerology_core import calculate_numerology, calculate_compatibility
from interpret import send_to_n8n_for_interpretation


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ bot.py
try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF —Å reportlab
    from pdf_generator_simple import generate_pdf
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF —Å reportlab")
except ImportError:
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        from text_report_generator import generate_pdf
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤")
    except ImportError:
        try:
            # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å weasyprint
            from pdf_generator import generate_pdf
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF")
        except ImportError:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")
            raise
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –∏ API
EXTERNAL_WEBHOOK_URL = os.getenv("EXTERNAL_WEBHOOK_URL", "https://nnikochann.ru/webhook/numero_post_bot")
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    logger.info("python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")
PDF_STORAGE_PATH = os.getenv("PDF_STORAGE_PATH", "./pdfs")
TEST_MODE = os.getenv("TEST_MODE", "true").lower() == "true"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PDF, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(PDF_STORAGE_PATH, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å MemoryStorage
from aiogram.client.default import DefaultBotProperties
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ –≤–º–µ—Å—Ç–æ Redis
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_birthdate = State()
    waiting_for_name = State()
    waiting_for_partner_birthdate = State()
    waiting_for_partner_name = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await db.create_user(user_id)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ú® –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç", callback_data="start_calculation"))
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ù—É–º–µ—Ä–æ–ª–æ–≥. –ú–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –∏ –¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=builder.as_markup()
    )
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á—ë—Ç"
@router.callback_query(F.data == "start_calculation")
async def process_calculation_button(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await callback_query.message.answer(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990)"
    )
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(UserStates.waiting_for_birthdate)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@router.message(UserStates.waiting_for_birthdate)
async def process_birthdate(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    try:
        birthdate = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(birthdate=birthdate.strftime("%Y-%m-%d"))
        
        # –ó–∞–ø—Ä–æ—Å –§–ò–û
        await message.answer("‚úçÔ∏è –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
        await state.set_state(UserStates.waiting_for_name)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990)"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(UserStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    await state.update_data(fio=message.text)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_data = await state.get_data()
    birthdate = user_data.get("birthdate")
    fio = user_data.get("fio")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.update_user(message.from_user.id, fio, birthdate)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞
    calculation_message = await message.answer("üîÆ –í—ã–ø–æ–ª–Ω—è—é –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    numerology_results = calculate_numerology(birthdate, fio)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î
    report_id = await db.save_report(message.from_user.id, "mini", numerology_results)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ n8n
    interpretation = await send_to_n8n_for_interpretation(numerology_results, "mini")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
    await bot.delete_message(chat_id=message.chat.id, message_id=calculation_message.message_id)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–∏–Ω–∏-–æ—Ç—á–µ—Ç–∞
    mini_report_text = interpretation.get('mini_report', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.')
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π PDF - 149 ‚ÇΩ", callback_data=f"buy_full_report:{report_id}"))
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"
    if TEST_MODE:
        builder.add(InlineKeyboardButton(
            text="üîç –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)", 
            callback_data=f"test_full_report:{report_id}"
        ))
    
    await message.answer(
        f"üåü <b>–í–∞—à –º–∏–Ω–∏-–æ—Ç—á–µ—Ç:</b>\n\n{mini_report_text}",
        reply_markup=builder.as_markup()
    )
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"
@router.callback_query(F.data.startswith("test_full_report:"))
async def process_test_full_report(callback_query: types.CallbackQuery):
    if not TEST_MODE:
        await callback_query.answer("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
        return
        
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await db.get_report(report_id)
    
    if not report:
        await callback_query.message.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.")
        return
        
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = report["user_id"]
    user = await db.get_user_by_id(user_id)
    
    if not user:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    wait_message = await callback_query.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    interpretation = await send_to_n8n_for_interpretation(report["core_json"], "full")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_path = generate_pdf(user, report["core_json"], interpretation.get("full_report", {}))
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=wait_message.message_id)
    
    if not pdf_path:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL PDF –≤ –ë–î
    await db.update_report_pdf(report_id, pdf_path)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("‚úÖ –í–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º).")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        pdf_file = FSInputFile(pdf_path, filename="numerology_report.pdf")
        await bot.send_document(callback_query.message.chat.id, pdf_file)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if TEST_MODE:
            builder.add(InlineKeyboardButton(
                text="üîî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)", 
                callback_data="test_subscribe"
            ))
        
        await callback_query.message.answer(
            "üåü –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã?\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 299 ‚ÇΩ –≤ –º–µ—Å—è—Ü!",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)" –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "test_subscribe")
async def process_test_subscription(callback_query: types.CallbackQuery):
    if not TEST_MODE:
        await callback_query.answer("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
        return
        
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    user = await db.get_user_by_tg_id(user_id)
    
    if not user:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscription = await db.get_user_subscription(user_id)
    
    if subscription and subscription["status"] in ["active", "trial"]:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
        await callback_query.message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. "
            "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑."
        )
    else:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_id = await db.create_subscription(user_id, "trial")
        
        if subscription_id:
            await callback_query.message.answer(
                "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.\n"
                "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è.\n\n"
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe."
            )
        else:
            await callback_query.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" (–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@router.callback_query(F.data == "subscribe")
async def process_subscription(callback_query: types.CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if TEST_MODE or not PAYMENT_TOKEN:
        await callback_query.message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
            "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\"."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    order_id = await db.create_order(
        user_id,
        product="subscription_month",
        price=299.0,
        currency="RUB",
        payload={"type": "subscription", "duration": "month"}
    )
    
    if not order_id:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ò–ò-–ù—É–º–µ—Ä–æ–ª–æ–≥",
        description="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ 1 –º–µ—Å—è—Ü",
        payload=f"subscription:{order_id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=29900)],  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        max_tip_amount=10000,
        suggested_tip_amounts=[5000, 10000],
        start_parameter="subscription"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    payment = message.successful_payment
    payload = payment.invoice_payload
    
    # –†–∞–∑–±–æ—Ä payload
    if ":" not in payload:
        logger.error(f"Invalid payload format: {payload}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        return
    
    payload_type, order_id_str = payload.split(":", 1)
    
    try:
        order_id = int(order_id_str)
    except ValueError:
        logger.error(f"Invalid order ID in payload: {order_id_str}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = await db.get_order(order_id)
    if not order:
        logger.error(f"Order not found: {order_id}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    await db.update_order_status(order_id, "paid")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if order["product"] == "full_report":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        await process_full_report_payment(message, order)
    elif order["product"] == "compatibility":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await process_compatibility_payment(message, order)
    elif order["product"] == "subscription_month":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        await process_subscription_payment(message, order)
    else:
        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ {order['product']} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.")

async def process_full_report_payment(message: Message, order: Dict[str, Any]):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    user_id = order["user_id"]
    payload = order.get("payload", {})
    report_id = payload.get("report_id")
    
    if not report_id:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –æ—Ç—á–µ—Ç–∞.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await db.get_report(report_id)
    if not report:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_id(user_id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    wait_message = await message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    interpretation = await send_to_n8n_for_interpretation(report["core_json"], "full")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_path = generate_pdf(user, report["core_json"], interpretation.get("full_report", {}))
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.delete_message(chat_id=message.chat.id, message_id=wait_message.message_id)
    
    if not pdf_path:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL PDF –≤ –ë–î
    await db.update_report_pdf(report_id, pdf_path)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        pdf_file = FSInputFile(pdf_path, filename="numerology_report.pdf")
        await bot.send_document(message.chat.id, pdf_file)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        
        await message.answer(
            "üåü –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã?\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 299 ‚ÇΩ –≤ –º–µ—Å—è—Ü!",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")

async def process_compatibility_payment(message: Message, order: Dict[str, Any]):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    user_id = order["user_id"]
    payload = order.get("payload", {})
    report_id = payload.get("report_id")
    
    if not report_id:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω ID –æ—Ç—á–µ—Ç–∞.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await db.get_report(report_id)
    if not report:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_id(user_id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    wait_message = await message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    interpretation = await send_to_n8n_for_interpretation(report["core_json"], "compatibility")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_path = generate_pdf(user, report["core_json"], interpretation.get("compatibility_report", {}), "compatibility")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.delete_message(chat_id=message.chat.id, message_id=wait_message.message_id)
    
    if not pdf_path:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL PDF –≤ –ë–î
    await db.update_report_pdf(report_id, pdf_path)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        pdf_file = FSInputFile(pdf_path, filename="compatibility_report.pdf")
        await bot.send_document(message.chat.id, pdf_file)
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        
        await message.answer(
            "üåü –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã?\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 299 ‚ÇΩ –≤ –º–µ—Å—è—Ü!",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")

async def process_subscription_payment(message: Message, order: Dict[str, Any]):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = order["user_id"]
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_id(user_id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription = await db.get_user_subscription(user_id)
    
    if subscription and subscription["status"] in ["active", "trial"]:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—Ä–æ–∫
        await db.update_subscription_status(subscription["id"], "active")
        
        await message.answer(
            "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 1 –º–µ—Å—è—Ü!\n\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe."
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_id = await db.create_subscription(user_id, "active")
        
        if subscription_id:
            await message.answer(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–µ—Å—è—Ü–∞.\n"
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe."
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@router.message(Command("report"))
async def cmd_report(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await message.answer("‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
		# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    report = await db.get_latest_user_report(user_id, "full")
    
    if not report or not report.get("pdf_url"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        report = await db.get_latest_user_report(user_id, "compatibility")
        
        if not report or not report.get("pdf_url"):
            await message.answer(
                "‚ÑπÔ∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞."
            )
            return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    pdf_path = report.get("pdf_url")
    report_type = "–æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏" if report.get("report_type") == "compatibility" else "–ø–æ–ª–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"
    
    await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π {report_type}...")
    
    try:
        pdf_file = FSInputFile(pdf_path, filename=f"{report_type}.pdf")
        await bot.send_document(message.chat.id, pdf_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π)
@router.message(Command("subscribe"))
async def cmd_subscribe(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await message.answer("‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscription = await db.get_user_subscription(user_id)
    
    if not subscription:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if TEST_MODE:
            builder.add(InlineKeyboardButton(
                text="üîî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)", 
                callback_data="test_subscribe"
            ))
        
        await message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - 299 ‚ÇΩ –≤ –º–µ—Å—è—Ü.",
            reply_markup=builder.as_markup()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
        status = subscription["status"]
        
        if status == "active":
            next_charge = subscription.get("next_charge")
            if isinstance(next_charge, str):
                try:
                    next_charge = datetime.fromisoformat(next_charge).date()
                except ValueError:
                    next_charge = None
            
            next_charge_str = next_charge.strftime("%d.%m.%Y") if next_charge else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription"))
            
            await message.answer(
                f"üíé –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {next_charge_str}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: 299 ‚ÇΩ –≤ –º–µ—Å—è—Ü.",
                reply_markup=builder.as_markup()
            )
        elif status == "trial":
            trial_end = subscription.get("trial_end")
            if isinstance(trial_end, str):
                try:
                    trial_end = datetime.fromisoformat(trial_end).date()
                except ValueError:
                    trial_end = None
            
            trial_end_str = trial_end.strftime("%d.%m.%Y") if trial_end else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
            
            await message.answer(
                f"üîç –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {trial_end_str}\n\n"
                f"–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
                reply_markup=builder.as_markup()
            )
        elif status == "canceled":
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
            
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            if TEST_MODE:
                builder.add(InlineKeyboardButton(
                    text="üîî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)", 
                    callback_data="test_subscribe"
                ))
            
            await message.answer(
                "üö´ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
                reply_markup=builder.as_markup()
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
@router.callback_query(F.data == "cancel_subscription")
async def process_cancel_subscription(callback_query: types.CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscription = await db.get_user_subscription(user_id)
    
    if not subscription or subscription["status"] != "active":
        await callback_query.message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    result = await db.update_subscription_status(subscription["id"], "canceled")
    
    if result:
        await callback_query.message.answer(
            "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n"
            "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe."
        )
    else:
        await callback_query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compatibility
@router.message(Command("compatibility"))
async def cmd_compatibility(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await message.answer("‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.get("birthdate") or not user.get("fio"):
        await message.answer(
            "‚ùó –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
        )
        return
    
    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await message.answer(
        "üë• –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990)"
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(
        user_birthdate=user.get("birthdate"),
        user_fio=user.get("fio")
    )
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await state.set_state(UserStates.waiting_for_partner_birthdate)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
@router.message(UserStates.waiting_for_partner_birthdate)
async def process_partner_birthdate(message: Message, state: FSMContext):
    try:
        partner_birthdate = datetime.strptime(message.text, "%d.%m.%Y").date()
        await state.update_data(partner_birthdate=partner_birthdate.strftime("%Y-%m-%d"))
        
        # –ó–∞–ø—Ä–æ—Å –§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await message.answer("‚úçÔ∏è –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await state.set_state(UserStates.waiting_for_partner_name)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990)"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞
@router.message(UserStates.waiting_for_partner_name)
async def process_partner_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    await state.update_data(partner_fio=message.text)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    user_birthdate = data.get("user_birthdate")
    user_fio = data.get("user_fio")
    partner_birthdate = data.get("partner_birthdate")
    partner_fio = data.get("partner_fio")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞
    calculation_message = await message.answer("üîÆ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    compatibility_results = calculate_compatibility(
        user_birthdate, user_fio,
        partner_birthdate, partner_fio
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î
    report_id = await db.save_report(message.from_user.id, "compatibility_mini", compatibility_results)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ n8n
    interpretation = await send_to_n8n_for_interpretation(compatibility_results, "compatibility_mini")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö
    await bot.delete_message(chat_id=message.chat.id, message_id=calculation_message.message_id)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–∏–Ω–∏-–æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    compatibility_score = compatibility_results.get("compatibility", {}).get("total", 0)
    score_percent = int(compatibility_score * 10)  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ü–µ–Ω–∫—É –∏–∑ 10 –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    
    mini_report_text = interpretation.get(
        'compatibility_mini_report', 
        f"üåü –í–∞—à–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å {partner_fio}: {score_percent}%"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - 199 ‚ÇΩ", 
        callback_data=f"buy_compatibility:{report_id}"
    ))
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"
    if TEST_MODE:
        builder.add(InlineKeyboardButton(
            text="üîç –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)", 
            callback_data=f"test_compatibility:{report_id}"
        ))
    
    await message.answer(
        f"{mini_report_text}",
        reply_markup=builder.as_markup()
    )
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)" –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.callback_query(F.data.startswith("test_compatibility:"))
async def process_test_compatibility(callback_query: types.CallbackQuery):
    if not TEST_MODE:
        await callback_query.answer("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω")
        return
        
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await db.get_report(report_id)
    
    if not report:
        await callback_query.message.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.")
        return
        
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = report["user_id"]
    user = await db.get_user_by_id(user_id)
    
    if not user:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    wait_message = await callback_query.message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    interpretation = await send_to_n8n_for_interpretation(report["core_json"], "compatibility")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_path = generate_pdf(user, report["core_json"], interpretation.get("compatibility_report", {}), "compatibility")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=wait_message.message_id)
    
    if not pdf_path:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL PDF –≤ –ë–î
    await db.update_report_pdf(report_id, pdf_path)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º).")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        pdf_file = FSInputFile(pdf_path, filename="compatibility_report.pdf")
        await bot.send_document(callback_query.message.chat.id, pdf_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - 199 ‚ÇΩ"
@router.callback_query(F.data.startswith("buy_compatibility:"))
async def process_buy_compatibility(callback_query: types.CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if TEST_MODE or not PAYMENT_TOKEN:
        await callback_query.message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
            "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\"."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await db.get_report(report_id)
    
    if not report:
        await callback_query.message.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = report["user_id"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    order_id = await db.create_order(
        user_id,
        product="compatibility",
        price=199.0,
        currency="RUB",
        payload={"type": "compatibility", "report_id": report_id}
    )
    
    if not order_id:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title="–û—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
        description="–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
        payload=f"compatibility:{order_id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–û—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", amount=19900)],  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        max_tip_amount=5000,
        suggested_tip_amounts=[2000, 5000],
        start_parameter="compatibility"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–Ω—ã–π PDF - 149 ‚ÇΩ"
@router.callback_query(F.data.startswith("buy_full_report:"))
async def process_buy_full_report(callback_query: types.CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if TEST_MODE or not PAYMENT_TOKEN:
        await callback_query.message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
            "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)\"."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Ç—á–µ—Ç–∞ –∏–∑ callback_data
    report_id = int(callback_query.data.split(":")[1])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = await db.get_report(report_id)
    
    if not report:
        await callback_query.message.answer("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = report["user_id"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
    order_id = await db.create_order(
        user_id,
        product="full_report",
        price=149.0,
        currency="RUB",
        payload={"type": "full_report", "report_id": report_id}
    )
    
    if not order_id:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞
    await bot.send_invoice(
        chat_id=callback_query.message.chat.id,
        title="–ü–æ–ª–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
        description="–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏",
        payload=f"full_report:{order_id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–ª–Ω—ã–π PDF-–æ—Ç—á–µ—Ç", amount=14900)],  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        max_tip_amount=5000,
        suggested_tip_amounts=[1000, 3000, 5000],
        start_parameter="full_report"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üîÆ <b>–ò–ò-–ù—É–º–µ—Ä–æ–ª–æ–≥</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞\n"
        "/report - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É–ø–ª–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç\n"
        "/compatibility - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n"
        "/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        
        "<b>üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
        "üî∏ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º–∏–Ω–∏-–æ—Ç—á–µ—Ç - –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞\n"
        "üî∏ –ü–æ–ª–Ω—ã–π PDF-–æ—Ç—á–µ—Ç (149 ‚ÇΩ) - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n"
        "üî∏ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (199 ‚ÇΩ) - —Ä–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n"
        "üî∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (299 ‚ÇΩ/–º–µ—Å—è—Ü) - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n\n"
        
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin_username"
    )
    
    await message.answer(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
@router.message(Command("settings"))
async def cmd_settings(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await message.answer("‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    current_lang = user.get("lang", "ru")
    push_enabled = user.get("push_enabled", True)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    lang_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if current_lang == "ru" else "üá¨üáß English"
    push_text = "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" if push_enabled else "–û—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text=f"–Ø–∑—ã–∫: {lang_text}", callback_data="toggle_lang"))
    builder.add(InlineKeyboardButton(text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {push_text}", callback_data="toggle_push"))
    
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {lang_text}\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {push_text}",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
@router.callback_query(F.data == "toggle_lang")
async def toggle_lang(callback_query: types.CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await callback_query.message.answer("‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    current_lang = user.get("lang", "ru")
    new_lang = "en" if current_lang == "ru" else "ru"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î
    result = await db.update_user_settings(user_id, lang=new_lang)
    
    if result:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        push_enabled = user.get("push_enabled", True)
        lang_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if new_lang == "ru" else "üá¨üáß English"
        push_text = "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" if push_enabled else "–û—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text=f"–Ø–∑—ã–∫: {lang_text}", callback_data="toggle_lang"))
        builder.add(InlineKeyboardButton(text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {push_text}", callback_data="toggle_push"))
        
        await callback_query.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {lang_text}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {push_text}",
            reply_markup=builder.as_markup()
        )
    else:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "toggle_push")
async def toggle_push(callback_query: types.CallbackQuery):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    user = await db.get_user_by_tg_id(user_id)
    if not user:
        await callback_query.message.answer("‚ùì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    current_push = user.get("push_enabled", True)
    new_push = not current_push
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î
    result = await db.update_user_settings(user_id, push_enabled=new_push)
    
    if result:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        current_lang = user.get("lang", "ru")
        lang_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if current_lang == "ru" else "üá¨üáß English"
        push_text = "–í–∫–ª—é—á–µ–Ω—ã ‚úÖ" if new_push else "–û—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text=f"–Ø–∑—ã–∫: {lang_text}", callback_data="toggle_lang"))
        builder.add(InlineKeyboardButton(text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {push_text}", callback_data="toggle_push"))
        
        await callback_query.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {lang_text}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {push_text}",
            reply_markup=builder.as_markup()
        )
    else:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö)
@router.message(lambda message: message.text and message.text.startswith("/"))
async def unknown_command(message: Message):
    await message.answer(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
@router.message()
async def process_message(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.\n"
        "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ long polling —Ä–µ–∂–∏–º–µ
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await db.init()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {'—Ç–µ—Å—Ç–æ–≤–æ–º' if TEST_MODE else '–æ–±—ã—á–Ω–æ–º'} —Ä–µ–∂–∏–º–µ")
    logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PDF: {PDF_STORAGE_PATH}")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())